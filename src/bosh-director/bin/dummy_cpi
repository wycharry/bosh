#!/usr/bin/env ruby

require 'json'
require 'yaml'
require 'securerandom'
require_relative '../lib/cloud/dummy'

module Logging
  def self.appenders;
    self;
  end

  def self.io(_, io)
    Logger.new(io);
  end

  class Logger
    attr_reader :io

    def initialize(io)
      @io = io
      @appenders = self
    end

    def add_appenders(logger)
      @io = logger.io;
    end

    def debug(message)
      io << "DEBUG - #{message}\n";
    end

    def info(message)
      io << "INFO - #{message}\n";
    end

    def warn(message)
      io << "WARN - #{message}\n";
    end

    def error(message)
      io << "ERROR - #{message}\n";
    end
  end
end

result = nil
error = nil

begin
  config_file_path = ARGV.shift
  director_config = YAML.load_file(config_file_path)

  cloud_properties = director_config['cloud']['properties']
  log_buffer = StringIO.new
  cloud_properties['log_buffer'] = log_buffer
  dummy = Bosh::Clouds::Dummy.new(cloud_properties)

  request = JSON.parse($stdin.readline)

  command = request['method']
  arguments = request['arguments']


  if director_config.dig('cloud','properties','agent','blobstore','provider') == nil
    tmp_file = config_file_path.gsub('director_test.yml',"#{SecureRandom.hex}_director_test.yml")
    File.open(tmp_file, 'w') {|f| f.write director_config.to_yaml }
    raise "Blobstore provider not set for Request #{request.inspect}"
  end

  result = dummy.send(command, *arguments)
rescue => e
  error = {
    'type' => e.message,
    'message' => "#{e.message}\n#{e.backtrace.join("\n")}",
    'ok_to_retry' => false
  }
end

response = { 'result' => result, 'error' => error, 'log' => log_buffer.string }
print response.to_json
